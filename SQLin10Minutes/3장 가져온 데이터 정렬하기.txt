-- 아래처럼 데이터를 가져오면 데이터는 어떤 순서로도 정렬되지 않은 상태라는 것을 알 수 있음
SELECT prod_name FROM Products;

-- SELECT문으로 가져온 데이터를 정렬하려면 ORDER BY절을 사용해야 함
SELECT prod_name FROM Products ORDER BY prod_name;

-- 아래처럼 2개를 정렬하게 되면, prod_price가 같을 때만 prod_name으로 정렬됨
SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price, prod_name;

-- 위와 같은 값을 얻을 수 있음. 
-- 단 사용자가 잘못된 열을 지정할 가능성이 크고, 
-- SELECT절에서 가져오는 열이 변경될 때 ORDER BY절을 수정하지 않아 실수로 잘못 정렬할 수 있음
SELECT prod_id, prod_price, prod_name FROM Products ORDER BY 2, 3;

-- DESC(Descending) : 내림차순
-- ASC(Ascending) : 오름차순. default값이다.
SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price DESC;

-- 위와 같은 결과가 나온다. 두 열 모두 내림차순으로 정렬하려면 ORDER BY prod_price DESC, prod_name DESC 라고 명시해줘야한다.
SELECT prod_id, prod_price, prod_name FROM Products ORDER BY prod_price DESC, prod_name;

-- 데이터 정렬 시 대소문자 구분은 DBMS설정에 따라 다르다.


-- 도전과제
-- 1) Customers테이블에서 모든 고객의 이름(cust_name)을 가져오고, 그 결과를 내림차순(Z > A)로 정렬하여 표시하는 SQL문을 작성하시오
SELECT cust_name FROM Customers ORDER BY cust_name DESC;

-- 2) Orders 테이블에서 고객ID(cust_id)와 주문번호(order_num)를 검색해 결과를 고객ID로 먼저 정렬하고 나서 최근 주문한 순서대로 정렬하는 SQL문을 작성하시오
SELECT cust_id, order_num FROM Orders ORDER BY cust_id ASC, order_num DESC;

-- 3) 우리가 운영하는 가상 상점은 비싼 품목을 많이 팔고 싶어 한다. OrderItems 테이블에서 수량 및 가격(item_price)을 검색해 가장 수량이 많고 높은 가격순으로 정렬하시오
SELECT * FROM OrderItems;
SELECT item_price FROM OrderItems ORDER BY quantity DESC, item_price DESC;








